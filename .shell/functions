function fb() {
  HOST=${1}
  [ -n "$2" ] && sshUserName=${2}
  echo -e "\nssh ${sshUserName}@${HOST}"
  ! ping_test $HOST && { echo 'Could not connect. :-( \n'; return 1}
  ssh ${sshUserName}@${HOST} #${USER} if your ad name and unix match
}

function ping_test() {
  HOST=${1}
  ping -c 1 -t 1 ${HOST} >/dev/null 2>&1
  if [ "${?}" != "0" ]; then
    return 1
  fi
  return 0
}

function git_dif() {
  git diff HEAD^^^
}

function git_dif_name_only() {
  git diff HEAD^^^ --name-only
}

# Searches the It-Infra codebase, by default is case sensitive,
# otherwise pass ignore after searchKey for non-case specific
function grepcode () {
	searchKey="$1"
	[[ "$2" == "ignore" ]] && grep -r $searchKey ~/it-infra/ ||
		grep -r $searchKey ~/it-infra/
}

function grepc () {
  grepcode "$@"
}

function cl() {
  cd "$@" && la;
}

function battery_charge {
  unamestr=$(uname)
  if [[ "$OSTYPE" == "linux-gnu" ]]; then
    # Do nothing
  elif [[ "$unamestr" == "Darwin"* ]]; then
    echo $(python ~/.shell/battery.py) 2>/dev/null
  fi
}

function moshw() {
PORT_START=60000
PORT_END=60020

MOSH_DIR=~/.mosh_wrapper
PORTS=$(seq ${PORT_START} ${PORT_END})
MOSH_COMMAND="mosh-client"

MY_UID=$(id -u)

DEFAULT_SERVER=dev

if [ -n "${1}" ]; then
  DEFAULT_SERVER=${1}
fi

if [ -z "${DEFAULT_SERVER}" ]; then
  echo "usage: $0 <server> (or specify DEFAULT_SERVER in the script)"
  exit 1
fi

if [ ! -d ${MOSH_DIR} ]; then
    mkdir ${MOSH_DIR}
fi

port_to_use=""
for port in ${PORTS}; do
    portfile=${MOSH_DIR}/port-${port}

    if [ -e ${portfile} ]; then
        pid=`cat ${portfile}`
        uid_command=`ps -p ${pid} -o "uid=,comm=" || true`
        if [ -z "${uid_command}" ]; then
            # process does not exist
            rm -f ${portfile}
        else
      uid=$(echo ${uid_command} | awk '{ print $1 }')
      command=$(echo ${uid_command} | awk '{ print $2 }')
            if [ "${command}" = "${MOSH_COMMAND}" ]; then
                # pid does not exist
                rm -f ${portfile}
            fi
            if [[ ${uid} != ${MY_UID} ]]; then
                # Not my process!
                rm -f ${portfile}
            fi
        fi
    fi

    if [ ! -e ${portfile} ]; then
        port_to_use=${port}
        echo $$ > ${portfile}
        break
    fi
done

if [ -n "${port_to_use}" ]; then
  MOSH_OPTS="-p ${port_to_use}"
  oldifs=${IFS}
  IFS='
'
  for line in $(host ${DEFAULT_SERVER}); do
    if echo "${line}" | grep -q "has IPv6 address"; then
      MOSH_OPTS="-6 ${MOSH_OPTS}"
      break
    fi
  done
  IFS=${oldifs}
    exec mosh ${MOSH_OPTS} ${DEFAULT_SERVER}
else
    echo "No unused ports to use"
    exit 1
fi
}

function tasty() {
  taste-tester ${1} -f -s ${2} --chef-port-range 5555,5555 --tunnel-port 4001
}
